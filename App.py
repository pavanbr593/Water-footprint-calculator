import streamlit as st

# Translations for multiple languages
translations = {
    "en": {
        "title": "ЁЯМ╛ЁЯТз Water Footprint Calculator",
        "description": "**Water Footprint Calculator** helps you estimate the water footprint for various agricultural products and final products.",
        "features": "### Features:\n- **Calculate Water Footprint for Raw Products**: Input crop type, region, and quantity.\n- **Calculate Water Footprint for Final Products**: Input the final product and quantity.",
        "supported_products": "### Supported Products:\n- **Raw Products**: Wheat, Rice, Corn, Soybean\n- **Final Products**: Bottled Orange Juice, Cooked Rice, Steamed Tomato, Canned Beans",
        "regions": "### Regions:\nCovers all states of India.",
        "how_to_use": "### How to Use:\n1. **Select the Product Type**: Raw or Final.\n2. **Input the Required Information**.\n3. **Click Calculate**.",
        "developed_by": "Developed by BitByBit",
        "product_types": ["Raw", "Final Product"],
        "raw_products": ["Wheat", "Rice", "Corn", "Soybean"],
        "final_products": ["Bottled Orange Juice", "Cooked Rice", "Steamed Tomato", "Canned Beans"],
        "calculate": "Calculate",
        "error_message": "Please enter all fields with valid values.",
    },
    "hi": {
        "title": "ЁЯМ╛ЁЯТз рдЬрд▓ рдкрджрдЪрд┐рд╣реНрди рдХреИрд▓рдХреБрд▓реЗрдЯрд░",
        "description": "**рдЬрд▓ рдкрджрдЪрд┐рд╣реНрди рдХреИрд▓рдХреБрд▓реЗрдЯрд░** рдЖрдкрдХреЛ рд╡рд┐рднрд┐рдиреНрди рдХреГрд╖рд┐ рдЙрддреНрдкрд╛рджреЛрдВ рдФрд░ рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рджреЛрдВ рдХреЗ рд▓рд┐рдП рдЬрд▓ рдкрджрдЪрд┐рд╣реНрди рдХрд╛ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред",
        "features": "### рд╕реБрд╡рд┐рдзрд╛рдПрдБ:\n- **рдХрдЪреНрдЪреЗ рдЙрддреНрдкрд╛рджреЛрдВ рдХреЗ рд▓рд┐рдП рдЬрд▓ рдкрджрдЪрд┐рд╣реНрди рдХреА рдЧрдгрдирд╛ рдХрд░реЗрдВ**: рдлрд╕рд▓ рдкреНрд░рдХрд╛рд░, рдХреНрд╖реЗрддреНрд░ рдФрд░ рдорд╛рддреНрд░рд╛ рдЗрдирдкреБрдЯ рдХрд░реЗрдВред\n- **рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рджреЛрдВ рдХреЗ рд▓рд┐рдП рдЬрд▓ рдкрджрдЪрд┐рд╣реНрди рдХреА рдЧрдгрдирд╛ рдХрд░реЗрдВ**: рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рдж рдФрд░ рдорд╛рддреНрд░рд╛ рджрд░реНрдЬ рдХрд░реЗрдВред",
        "supported_products": "### рд╕рдорд░реНрдерд┐рдд рдЙрддреНрдкрд╛рдж:\n- **рдХрдЪреНрдЪреЗ рдЙрддреНрдкрд╛рдж**: рдЧреЗрд╣реВрдВ, рдЪрд╛рд╡рд▓, рдордХреНрдХрд╛, рд╕реЛрдпрд╛рдмреАрди\n- **рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рдж**: рдмреЛрддрд▓рдмрдВрдж рд╕рдВрддрд░реЗ рдХрд╛ рд░рд╕, рдкрдХрд╛ рд╣реБрдЖ рдЪрд╛рд╡рд▓, рд╕реНрдЯреАрдореНрдб рдЯрдорд╛рдЯрд░, рдХреИрдиреНрдб рдмреАрдиреНрд╕",
        "regions": "### рдХреНрд╖реЗрддреНрд░:\nрднрд╛рд░рдд рдХреЗ рд╕рднреА рд░рд╛рдЬреНрдп рдХрд╡рд░ рдХрд┐рдП рдЧрдП рд╣реИрдВред",
        "how_to_use": "### рдЙрдкрдпреЛрдЧ рдХреИрд╕реЗ рдХрд░реЗрдВ:\n1. **рдЙрддреНрдкрд╛рдж рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ**: рдХрдЪреНрдЪрд╛ рдпрд╛ рдЕрдВрддрд┐рдоред\n2. **рдЖрд╡рд╢реНрдпрдХ рдЬрд╛рдирдХрд╛рд░реА рджрд░реНрдЬ рдХрд░реЗрдВ**ред\n3. **рдХреИрд▓реНрдХреНрдпреБрд▓реЗрдЯ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ**ред",
        "developed_by": "BitByBit рджреНрд╡рд╛рд░рд╛ рд╡рд┐рдХрд╕рд┐рдд",
        "product_types": ["рдХрдЪреНрдЪрд╛", "рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рдж"],
        "raw_products": ["рдЧреЗрд╣реВрдВ", "рдЪрд╛рд╡рд▓", "рдордХреНрдХрд╛", "рд╕реЛрдпрд╛рдмреАрди"],
        "final_products": ["рдмреЛрддрд▓рдмрдВрдж рд╕рдВрддрд░реЗ рдХрд╛ рд░рд╕", "рдкрдХрд╛ рд╣реБрдЖ рдЪрд╛рд╡рд▓", "рд╕реНрдЯреАрдореНрдб рдЯрдорд╛рдЯрд░", "рдХреИрдиреНрдб рдмреАрдиреНрд╕"],
        "calculate": "рдЧрдгрдирд╛ рдХрд░реЗрдВ",
        "error_message": "рдХреГрдкрдпрд╛ рд╕рднреА рдлрд╝реАрд▓реНрдб рдореЗрдВ рдорд╛рдиреНрдп рдорд╛рди рджрд░реНрдЬ рдХрд░реЗрдВред",
    },
    "ta": {
        "title": "ЁЯМ╛ЁЯТз роирпАро░рпН роХро╛ро▓роЯро┐роХрпНроХрпБро▒ро┐рокрпНрокрпБ роХрогроХрпНроХрпАроЯрпБ",
        "description": "**роирпАро░рпН роХро╛ро▓роЯро┐роХрпНроХрпБро▒ро┐рокрпНрокрпБ роХрогроХрпНроХрпАроЯрпБ** ро╡рпЗро│ро╛рогрпН рооро▒рпНро▒рпБроорпН роЗро▒рпБродро┐рокрпН рокрпКро░рпБроЯрпНроХро│рпБроХрпНроХрпБ роирпАро░рпН роХро╛ро▓роЯро┐роХрпНроХрпБро▒ро┐рокрпНрокрпБ роородро┐рокрпНрокрпАроЯрпБ роЪрпЖропрпНроп роЙродро╡рпБроХро┐ро▒родрпБ.",
        "features": "### роЕроорпНроЪроЩрпНроХро│рпН:\n- **роорпБродройрпНроорпИ рокрпКро░рпБроЯрпНроХро│рпН**: рокропро┐ро░рпН ро╡роХрпИ, рокроХрпБродро┐, роЕро│ро╡рпБ роЕро│ро┐роХрпНроХро╡рпБроорпН.\n- **роЗро▒рпБродро┐рокрпН рокрпКро░рпБроЯрпНроХро│рпН**: роЗро▒рпБродро┐ рокрпКро░рпБро│рпН рооро▒рпНро▒рпБроорпН роЕро│ро╡рпИ роЕро│ро┐роХрпНроХро╡рпБроорпН.",
        "supported_products": "### роЖродро░ро╡рпБ рокрпКро░рпБроЯрпНроХро│рпН:\n- **роорпБродройрпНроорпИ рокрпКро░рпБроЯрпНроХро│рпН**: роХрпЛродрпБроорпИ, роЕро░ро┐роЪро┐, роороХрпНроХро╛роЪрпНроЪрпЛро│роорпН, роЪрпЛропро╛рокрпАройрпН\n- **роЗро▒рпБродро┐рокрпН рокрпКро░рпБроЯрпНроХро│рпН**: рокро╛роЯрпНроЯро┐ро▓ро┐ро▓рпН роЖро░роЮрпНроЪрпБ роЪро╛ро▒рпБ, роЪроорпИродрпНрод роЕро░ро┐роЪро┐, роЖро╡ро┐ропрпВроЯрпНроЯро┐роп родроХрпНроХро╛ро│ро┐, роХрпЗройрпНроЯрпБ рокрпАройрпНро╕рпН",
        "regions": "### рокроХрпБродро┐:\nроЗроирпНродро┐ропро╛ро╡ро┐ройрпН роЕройрпИродрпНродрпБ рооро╛роиро┐ро▓роЩрпНроХро│рпИропрпБроорпН роЙро│рпНро│роЯроХрпНроХро┐ропродрпБ.",
        "how_to_use": "### рокропройрпНрокро╛роЯрпБ:\n1. **родропро╛ро░ро┐рокрпНрокрпБ ро╡роХрпИ родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН**: роорпБродройрпНроорпИ роЕро▓рпНро▓родрпБ роЗро▒рпБродро┐.\n2. **родрпЗро╡рпИропро╛рой родроХро╡ро▓рпИ роЕро│ро┐роХрпНроХро╡рпБроорпН**.\n3. **роХрогроХрпНроХрпАроЯрпБ роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН**.",
        "developed_by": "BitByBit роорпВро▓роорпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ",
        "product_types": ["роорпБродройрпНроорпИ", "роЗро▒рпБродро┐ рокрпКро░рпБроЯрпНроХро│рпН"],
        "raw_products": ["роХрпЛродрпБроорпИ", "роЕро░ро┐роЪро┐", "роороХрпНроХро╛роЪрпНроЪрпЛро│роорпН", "роЪрпЛропро╛рокрпАройрпН"],
        "final_products": ["рокро╛роЯрпНроЯро┐ро▓ро┐ро▓рпН роЖро░роЮрпНроЪрпБ роЪро╛ро▒рпБ", "роЪроорпИродрпНрод роЕро░ро┐роЪро┐", "роЖро╡ро┐ропрпВроЯрпНроЯро┐роп родроХрпНроХро╛ро│ро┐", "роХрпЗройрпНроЯрпБ рокрпАройрпНро╕рпН"],
        "calculate": "роХрогроХрпНроХро┐роЯрпБ",
        "error_message": "роЪро░ро┐ропро╛рой роородро┐рокрпНрокрпБроХро│рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН.",
    },
    "te": {
        "title": "ЁЯМ╛ЁЯТз р░ир▒Ар░Яр░┐ р░Жр░ир░╡р░╛р░│р▒Нр░▓ р░Хр▒Нр░пр░╛р░▓р░┐р░Хр▒Нр░пр▒Бр░▓р▒Зр░Яр░░р▒Н",
        "description": "**р░ир▒Ар░Яр░┐ р░Жр░ир░╡р░╛р░│р▒Нр░▓ р░Хр▒Нр░пр░╛р░▓р░┐р░Хр▒Нр░пр▒Бр░▓р▒Зр░Яр░░р▒Н** р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б р░ор░░р░┐р░пр▒Б р░др▒Бр░жр░┐ р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓ р░ир▒Ар░Яр░┐ р░╡р░┐р░ир░┐р░пр▒Лр░Чр░╛р░ир▒Нр░ир░┐ р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░пр░бр░Вр░▓р▒Л р░╕р░╣р░╛р░пр░кр░бр▒Бр░др▒Бр░Вр░жр░┐.",
        "features": "### р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б:\n- **р░ор▒Бр░бр░┐ р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓ р░ир▒Ар░Яр░┐ р░╡р░┐р░ир░┐р░пр▒Лр░Чр░В**: р░кр░Вр░Я р░░р░Хр░В, р░кр▒Нр░░р░╛р░Вр░др░В р░ор░░р░┐р░пр▒Б р░кр░░р░┐р░ор░╛р░гр░В р░Зр░╡р▒Нр░╡р░Вр░бр░┐.\n- **р░др▒Бр░жр░┐ р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓ р░ир▒Ар░Яр░┐ р░╡р░┐р░ир░┐р░пр▒Лр░Чр░В**: р░др▒Бр░жр░┐ р░Йр░др▒Нр░кр░др▒Нр░др░┐ р░ор░░р░┐р░пр▒Б р░кр░░р░┐р░ор░╛р░гр░╛р░ир▒Нр░ир░┐ р░Зр░╡р▒Нр░╡р░Вр░бр░┐.",
        "supported_products": "### р░ор░жр▒Нр░жр░др▒Б р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б:\n- **р░ор▒Бр░бр░┐ р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б**: р░Чр▒Лр░зр▒Бр░о, р░мр░┐р░пр▒Нр░пр░В, р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и, р░╕р▒Лр░пр░╛р░мр▒Ар░ир▒Н\n- **р░др▒Бр░жр░┐ р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б**: р░мр░╛р░Яр░┐р░▓р▒Н р░Жр░░р▒Жр░Вр░Ьр▒Н р░Ьр▒Нр░пр▒Вр░╕р▒Н, р░Йр░бр░┐р░Хр░┐р░Вр░Ър░┐р░и р░мр░┐р░пр▒Нр░пр░В, р░Жр░╡р░┐р░░р░┐ р░Яр░ор▒Лр░Яр░╛, р░бр░мр▒Нр░мр░╛р░▓р▒Л р░мр▒Ар░ир▒Нр░╕р▒Н",
        "regions": "### р░кр▒Нр░░р░╛р░Вр░др░╛р░▓р▒Б:\nр░нр░╛р░░р░др░жр▒Зр░╢р░Вр░▓р▒Лр░ир░┐ р░Ер░ир▒Нр░ир░┐ р░░р░╛р░╖р▒Нр░Яр▒Нр░░р░╛р░▓р▒Б р░Хр░╡р░░р▒Н р░Ър▒Зр░пр░мр░бр▒Нр░бр░╛р░пр░┐.",
        "how_to_use": "### р░Ор░▓р░╛ р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░╛р░▓р░┐:\n1. **р░Йр░др▒Нр░кр░др▒Нр░др░┐ р░░р░Хр░В р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐**: р░ор▒Бр░бр░┐ р░▓р▒Зр░жр░╛ р░др▒Бр░жр░┐ р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б.\n2. **р░Ер░╡р░╕р░░р░ор▒Ир░и р░╕р░ор░╛р░Ър░╛р░░р░В р░Зр░╡р▒Нр░╡р░Вр░бр░┐**.\n3. **р░Хр▒Нр░пр░╛р░▓р░┐р░Хр▒Нр░пр▒Бр░▓р▒Зр░Яр▒Н р░Хр▒Нр░▓р░┐р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐**.",
        "developed_by": "BitByBit р░жр▒Нр░╡р░╛р░░р░╛ р░Ер░нр░┐р░╡р▒Гр░жр▒Нр░зр░┐ р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐",
        "product_types": ["р░ор▒Бр░бр░┐", "р░др▒Бр░жр░┐ р░Йр░др▒Нр░кр░др▒Нр░др░┐"],
        "raw_products": ["р░Чр▒Лр░зр▒Бр░о", "р░мр░┐р░пр▒Нр░пр░В", "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и", "р░╕р▒Лр░пр░╛р░мр▒Ар░ир▒Н"],
        "final_products": ["р░мр░╛р░Яр░┐р░▓р▒Н р░Жр░░р▒Жр░Вр░Ьр▒Н р░Ьр▒Нр░пр▒Вр░╕р▒Н", "р░Йр░бр░┐р░Хр░┐р░Вр░Ър░┐р░и р░мр░┐р░пр▒Нр░пр░В", "р░Жр░╡р░┐р░░р░┐ р░Яр░ор▒Лр░Яр░╛", "р░бр░мр▒Нр░мр░╛р░▓р▒Л р░мр▒Ар░ир▒Нр░╕р▒Н"],
        "calculate": "р░Хр▒Нр░пр░╛р░▓р░┐р░Хр▒Нр░пр▒Бр░▓р▒Зр░Яр▒Н",
        "error_message": "р░жр░пр░Ър▒Зр░╕р░┐ р░Ер░ир▒Нр░ир░┐ р░лр▒Ар░▓р▒Нр░бр▒Нр░╕р▒НтАМр░▓р▒Л р░Ър▒Жр░▓р▒Нр░▓р▒Бр░мр░╛р░Яр▒Б р░Ер░пр▒Нр░пр▒З р░╡р░┐р░▓р▒Бр░╡р░▓р▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐.",
    },
    "kn": {
        "title": "ЁЯМ╛ЁЯТз р▓ир│Ар▓░р▓┐р▓и р▓кр▓╛р▓жр▓Ър▓┐р▓╣р│Нр▓ир│Жр▓Чр▓│ р▓Хр│Нр▓пр▓╛р▓▓р▓┐р▓Хр│Нр▓пр│Бр▓▓р│Зр▓Яр▓░р│Н",
        "description": "**р▓ир│Ар▓░р▓┐р▓и р▓кр▓╛р▓жр▓Ър▓┐р▓╣р│Нр▓ир│Жр▓Чр▓│ р▓Хр│Нр▓пр▓╛р▓▓р▓┐р▓Хр│Нр▓пр│Бр▓▓р│Зр▓Яр▓░р│Н** р▓╡р▓┐р▓╡р▓┐р▓з р▓Хр│Гр▓╖р▓┐ р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Ер▓Вр▓др▓┐р▓о р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│ р▓ир│Ар▓░р▓┐р▓и р▓мр▓│р▓Хр│Жр▓пр▓ир│Нр▓ир│Б р▓Ер▓Вр▓жр▓╛р▓Ьр▓┐р▓╕р▓▓р│Б р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓жр│Ж.",
        "features": "### р▓╡р│Ир▓╢р▓┐р▓╖р│Нр▓Яр│Нр▓пр▓Чр▓│р│Б:\n- **р▓ор│Вр▓▓ р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б**: р▓мр│Жр▓│р│Ж р▓кр│Нр▓░р▓Хр▓╛р▓░, р▓кр│Нр▓░р▓жр│Зр▓╢ р▓ор▓др│Нр▓др│Б р▓кр│Нр▓░р▓ор▓╛р▓гр▓╡р▓ир│Нр▓ир│Б р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐.\n- **р▓Ер▓Вр▓др▓┐р▓о р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б**: р▓Ер▓Вр▓др▓┐р▓о р▓Йр▓др│Нр▓кр▓ир│Нр▓и р▓ор▓др│Нр▓др│Б р▓кр│Нр▓░р▓ор▓╛р▓гр▓╡р▓ир│Нр▓ир│Б р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐.",
        "supported_products": "### р▓мр│Жр▓Вр▓мр▓▓р▓┐р▓д р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б:\n- **р▓ор│Вр▓▓ р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б**: р▓Чр│Лр▓зр▓┐, р▓Ер▓Хр│Нр▓Хр▓┐, р▓Ьр│Лр▓│, р▓╕р│Лр▓пр▓╛р▓мр│Ар▓ир│Н\n- **р▓Ер▓Вр▓др▓┐р▓о р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б**: р▓мр▓╛р▓Яр▓▓р│Н р▓Жр▓░р│Зр▓Вр▓Ьр│Н р▓Ьр│Нр▓пр│Вр▓╕р│Н, р▓Ер▓Хр│Нр▓Хр▓┐р▓пр▓ир│Нр▓ир│Б р▓Тр▓жр│Нр▓жр▓╛р▓Чр▓┐, р▓Жр▓╡р▓┐р▓пр▓┐ р▓Яр│Кр▓ор│Нр▓пр▓╛р▓Яр│К, р▓Хр│Нр▓пр▓╛р▓ир│Нр▓бр│Н р▓мр│Ар▓ир│Нр▓╕р│Н",
        "regions": "### р▓кр│Нр▓░р▓жр│Зр▓╢р▓Чр▓│р│Б:\nр▓нр▓╛р▓░р▓др▓ж р▓Ор▓▓р│Нр▓▓р▓╛ р▓░р▓╛р▓Ьр│Нр▓пр▓Чр▓│р▓ир│Нр▓ир│Б р▓Тр▓│р▓Чр│Кр▓Вр▓бр▓┐р▓жр│Ж.",
        "how_to_use": "### р▓мр▓│р▓╕р│Бр▓╡р│Бр▓жр│Б р▓╣р│Зр▓Чр│Ж:\n1. **р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓ж р▓кр│Нр▓░р▓Хр▓╛р▓░р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐**: р▓ор│Вр▓▓ р▓Ер▓ер▓╡р▓╛ р▓Ер▓Вр▓др▓┐р▓о.\n2. **р▓Ер▓Чр▓др│Нр▓пр▓╡р▓┐р▓░р│Бр▓╡ р▓ор▓╛р▓╣р▓┐р▓др▓┐ р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐**.\n3. **р▓Хр│Нр▓пр▓╛р▓▓р▓┐р▓Хр│Нр▓пр│Бр▓▓р│Зр▓Яр▓░р│Н р▓Хр│Нр▓▓р▓┐р▓Хр│Н р▓ор▓╛р▓бр▓┐**.",
        "developed_by": "BitByBit р▓ор│Вр▓▓р▓Х р▓Ер▓нр▓┐р▓╡р│Гр▓жр│Нр▓зр▓┐р▓кр▓бр▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж",
        "product_types": ["р▓ор│Вр▓▓", "р▓Ер▓Вр▓др▓┐р▓о р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б"],
        "raw_products": ["р▓Чр│Лр▓зр▓┐", "р▓Ер▓Хр│Нр▓Хр▓┐", "р▓Ьр│Лр▓│", "р▓╕р│Лр▓пр▓╛р▓мр│Ар▓ир│Н"],
        "final_products": ["р▓мр▓╛р▓Яр▓▓р│Н р▓Жр▓░р│Зр▓Вр▓Ьр│Н р▓Ьр│Нр▓пр│Вр▓╕р│Н", "р▓Ер▓Хр│Нр▓Хр▓┐р▓пр▓ир│Нр▓ир│Б р▓Тр▓жр│Нр▓жр▓╛р▓Чр▓┐", "р▓Жр▓╡р▓┐р▓пр▓┐ р▓Яр│Кр▓ор│Нр▓пр▓╛р▓Яр│К", "р▓Хр│Нр▓пр▓╛р▓ир│Нр▓бр│Н р▓мр│Ар▓ир│Нр▓╕р│Н"],
        "calculate": "р▓Хр│Нр▓пр▓╛р▓▓р▓┐р▓Хр│Нр▓пр│Бр▓▓р│Зр▓Яр▓░р│Н",
        "error_message": "р▓╕р▓Хр▓╛р▓▓р▓┐р▓Х р▓ор│Мр▓▓р│Нр▓пр▓Чр▓│р▓ир│Нр▓ир│Б р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐.",
    },
    "mr": {
        "title": "ЁЯМ╛ЁЯТз рдкрд╛рдгреНрдпрд╛рдЪрд╛ рдард╕рд╛ рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░",
        "description": "**рдкрд╛рдгреНрдпрд╛рдЪрд╛ рдард╕рд╛ рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░** рд╡рд┐рд╡рд┐рдз рд╢реЗрддреА рдЙрддреНрдкрд╛рджрдиреЗ рдЖрдгрд┐ рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рджрдиреЗ рдпрд╛рдВрдЪреЗ рдкрд╛рдгреНрдпрд╛рдЪрд╛ рд╡рд╛рдкрд░ рдореЛрдЬрдгреНрдпрд╛рд╕ рдорджрдд рдХрд░рддреЛ.",
        "features": "### рд╡реИрд╢рд┐рд╖реНрдЯреНрдпреЗ:\n- **рдореВрд▓рднреВрдд рдЙрддреНрдкрд╛рджрдиреЗ**: рдкрд┐рдХрд╛рдЪрд╛ рдкреНрд░рдХрд╛рд░, рдХреНрд╖реЗрддреНрд░ рдЖрдгрд┐ рдкреНрд░рдорд╛рдг рдирд┐рд╡рдбрд╛.\n- **рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рджрдиреЗ**: рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рджрди рдЖрдгрд┐ рдкреНрд░рдорд╛рдг рдирд┐рд╡рдбрд╛.",
        "supported_products": "### рд╕рдорд░реНрдереАрдд рдЙрддреНрдкрд╛рджрдиреЗ:\n- **рдореВрд▓рднреВрдд рдЙрддреНрдкрд╛рджрдиреЗ**: рдЧрд╣реВ, рддрд╛рдВрджреВрд│, рдордХрд╛, рд╕реЛрдпрд╛рдмреАрди\n- **рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рджрдиреЗ**: рдмрд╛рдЯрд▓реАрдд рдСрд░реЗрдВрдЬ рдЬреНрдпреВрд╕, рд╢рд┐рдЬрд▓реЗрд▓реЗ рддрд╛рдВрджреВрд│, рд╡рд╛рдлрд╡рд▓реЗрд▓реЗ рдЯреЛрдореЕрдЯреЛ, рдХреЕрдиреНрдб рдмреАрдиреНрд╕",
        "regions": "### рдХреНрд╖реЗрддреНрд░:\nрднрд╛рд░рддрд╛рдЪреНрдпрд╛ рд╕рд░реНрд╡ рд░рд╛рдЬреНрдпрд╛рдВрдЪреЗ рдХрд╡реНрд╣рд░реЗрдЬ рдХреЗрд▓реЗ рдЖрд╣реЗ.",
        "how_to_use": "### рд╡рд╛рдкрд░рдгреНрдпрд╛рдЪреА рдкрджреНрдзрдд:\n1. **рдЙрддреНрдкрд╛рджрди рдкреНрд░рдХрд╛рд░ рдирд┐рд╡рдбрд╛**: рдореВрд▓рднреВрдд рдХрд┐рдВрд╡рд╛ рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рджрдиреЗ.\n2. **рдЖрд╡рд╢реНрдпрдХ рдорд╛рд╣рд┐рддреА рднрд░рд╛**.\n3. **рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░ рдХреНрд▓рд┐рдХ рдХрд░рд╛**.",
        "developed_by": "BitByBit рджреНрд╡рд╛рд░реЗ рд╡рд┐рдХрд╕рд┐рдд рдХреЗрд▓реЗрд▓реЗ",
        "product_types": ["рдореВрд▓рднреВрдд", "рдЕрдВрддрд┐рдо рдЙрддреНрдкрд╛рджрдиреЗ"],
        "raw_products": ["рдЧрд╣реВ", "рддрд╛рдВрджреВрд│", "рдордХрд╛", "рд╕реЛрдпрд╛рдмреАрди"],
        "final_products": ["рдмрд╛рдЯрд▓реАрдд рдСрд░реЗрдВрдЬ рдЬреНрдпреВрд╕", "рд╢рд┐рдЬрд▓реЗрд▓реЗ рддрд╛рдВрджреВрд│", "рд╡рд╛рдлрд╡рд▓реЗрд▓реЗ рдЯреЛрдореЕрдЯреЛ", "рдХреЕрдиреНрдб рдмреАрдиреНрд╕"],
        "calculate": "рдЧрдгрдирд╛ рдХрд░рд╛",
        "error_message": "рд╕рд░реНрд╡ рдлреАрд▓реНрдбреНрд╕рдордзреНрдпреЗ рдпреЛрдЧреНрдп рдореВрд▓реНрдпреЗ рднрд░рд╛.",
    }
}

# List of Indian States and Region-Specific Multipliers for Water Footprint
states = {
    "Andhra Pradesh": 1.05,
    "Arunachal Pradesh": 1.1,
    "Assam": 1.15,
    "Bihar": 0.95,
    "Chhattisgarh": 0.9,
    "Goa": 1.0,
    "Gujarat": 0.85,
    "Haryana": 1.2,
    "Himachal Pradesh": 0.95,
    "Jharkhand": 0.9,
    "Karnataka": 1.05,
    "Kerala": 1.1,
    "Madhya Pradesh": 0.85,
    "Maharashtra": 0.9,
    "Manipur": 1.15,
    "Meghalaya": 1.1,
    "Mizoram": 1.15,
    "Nagaland": 1.1,
    "Odisha": 0.95,
    "Punjab": 1.25,
    "Rajasthan": 1.3,
    "Sikkim": 1.1,
    "Tamil Nadu": 1.05,
    "Telangana": 1.1,
    "Tripura": 1.15,
    "Uttar Pradesh": 1.2,
    "Uttarakhand": 1.0,
    "West Bengal": 1.0,
    "Delhi": 1.15,
    "Puducherry": 1.05,
    "Lakshadweep": 1.1,
    "Andaman and Nicobar Islands": 1.1,
    "Chandigarh": 1.2,
    "Dadra and Nagar Haveli and Daman and Diu": 1.05,
    "Jammu and Kashmir": 0.95,
    "Ladakh": 1.05,
}

# Initialize session state for language if not set
def main():
    # Set default language as English
    if 'language' not in st.session_state:
        st.session_state.language = 'en'
    
    # Sidebar to select language
    language = st.sidebar.selectbox(
        'Select Language',
        ['English', 'рд╣рд┐рдиреНрджреА', 'родрооро┐ро┤рпН', 'р░др▒Жр░▓р▒Бр░Чр▒Б', 'р▓Хр▓ир│Нр▓ир▓б', 'рдорд░рд╛рдареА']
    )

# Language selection
st.sidebar.title("Select Language")
selected_language = st.sidebar.radio(
    "Choose a language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ / роорпКро┤ро┐ родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН / р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐", 
    ("English", "рд╣рд┐рдиреНрджреА", "родрооро┐ро┤рпН", "р░др▒Жр░▓р▒Бр░Чр▒Б", "р▓Хр▓ир│Нр▓ир▓б","рдорд░рд╛рдареА"), 
    format_func=lambda lang: lang
)

# Set language in session state based on selection
language_map = {
        'English': 'en',
        'рд╣рд┐рдиреНрджреА': 'hi',
        'родрооро┐ро┤рпН': 'ta',
        'р░др▒Жр░▓р▒Бр░Чр▒Б': 'te',
        'р▓Хр▓ир│Нр▓ир▓б': 'kn',
        'рдорд░рд╛рдареА': 'mr'
}
st.session_state.language = language_map[selected_language]

# Main function
def main():
    # Display the logo
    st.title(translations[st.session_state.language]["title"])

    # Sidebar for app description and guide
    st.sidebar.header(translations[st.session_state.language]["description"])
    st.sidebar.write(translations[st.session_state.language]["features"])
    st.sidebar.write(translations[st.session_state.language]["supported_products"])
    st.sidebar.write(translations[st.session_state.language]["regions"])
    st.sidebar.write(translations[st.session_state.language]["how_to_use"])
    st.sidebar.write(translations[st.session_state.language]["developed_by"])

    # Product type selection
    product_type = st.selectbox(
        "Select Product Type",
        translations[st.session_state.language]["product_types"]
    )

    # Input fields for raw products
    if product_type == translations[st.session_state.language]["product_types"][0]:  # "Raw"
        crop_type = st.selectbox(
            "Select Crop Type",
            translations[st.session_state.language]["raw_products"]
        )
        region = st.selectbox("Select Region", list(states.keys()))
        quantity = st.number_input("Enter Quantity (in kg)", min_value=0.0, step=0.1)

        # Calculation logic for raw products
        def calculate_water_footprint(crop, region, quantity):
            water_footprints = {
                "Wheat": 1000,       # liters per kg
                "Rice": 2000,        # liters per kg
                "Corn": 1500,        # liters per kg
                "Soybean": 1200,     # liters per kg
                "Barley": 1420,      # liters per kg
                "Oats": 1400,        # liters per kg
                "Peanuts": 3100,     # liters per kg
                "Cottonseed": 3400,  # liters per kg
                "Sunflower": 2800,   # liters per kg
                "Sugarcane": 1500,   # liters per kg
                "Almonds": 16000,    # liters per kg
                "Coffee Beans": 18000,  # liters per kg

            }
            regional_multiplier = states[region]  # Get multiplier for the selected region
            return water_footprints.get(crop, 0) * quantity * regional_multiplier

        # Calculate and display results
        if st.button(translations[st.session_state.language]["calculate"]):
            if crop_type and region and quantity > 0:
                water_footprint = calculate_water_footprint(crop_type, region, quantity)
                st.write(f"**Water Footprint for {quantity} kg of {crop_type} in {region}: {water_footprint} liters**")
            else:
                st.write(translations[st.session_state.language]["error_message"])

    else:  # "Final"
        final_product = st.selectbox(
            "Select Final Product",
            translations[st.session_state.language]["final_products"]
        )
        quantity = st.number_input("Enter Quantity (in kg)", min_value=0.0, step=0.1)

        # Simple calculation logic for final products
        def calculate_final_product_water_footprint(product, region, quantity):
            product_water_footprints = {
                "Bottled Orange Juice": 2500,    # liters per kg
                "Cooked Rice": 1500,             # liters per kg
                "Steamed Tomato": 800,           # liters per kg
                "Canned Beans": 1200 ,           # liters per kg
                "Bottled Orange Juice": 2500,     # liters per kg
                "Bread (Wheat)": 1600,            # liters per kg
                "Boiled Pasta": 1900,             # liters per kg
                "Chocolate Bar": 17000,           # liters per kg
                "Grilled Beef": 15400,            # liters per kg
                "Roast Chicken": 4300,            # liters per kg
                "Mashed Potatoes": 287,           # liters per kg
                "Baked Apples": 822,              # liters per kg
                "Bottled Milk": 1000,             # liters per kg
               "Sliced Cheese": 5000,            # liters per kg
               "Boiled Eggs": 3300,              # liters per kg

            }
            regional_multiplier = states[region]  # Get multiplier for the selected region
            return product_water_footprints.get(product, 0) * quantity * regional_multiplier

        # Calculate and display results
        if st.button(translations[st.session_state.language]["calculate"]):
            if final_product and quantity > 0:
                water_footprint = calculate_final_product_water_footprint(final_product, region, quantity)
                st.write(f"**Water Footprint for {quantity} kg of {final_product} in {region}: {water_footprint} liters**")
            else:
                st.write(translations[st.session_state.language]["error_message"])

if __name__ == "__main__":
    main()
